function  [edge_map, FinalEdge, complex_map, textureImg] = GetBasicInfo(img)
%GETBASICINFO
%   Input: 
%       img - An image in RGB color space
%   Output:
%       edge_map - Generated by the structured edge detection: 
%           "Structured Forests for Fast Edge Detection" by Piotr Dollar and C. Lawrence Zitnick
%       FinalEdge - gradientmap + edge_map
%       textureImg - the normalized texture map by log-Gabor filter
%       

    %% Generate Edge Maps
    %%% structured edge detection
    %%% Need Piotr's Computer Vision Matlab Toolbox
    setParametersSED ; % .\ExtractContour, parameters for Structured Edge Detection
    edge_map = edgesDetect(img, model) ;
    
    filter ='sobel' ;
    total = get_gradient(img, filter) ;
    gradientMap = mat2gray(total) ;
    FinalEdge = (edge_map + gradientMap) ;

    %% Generate Textures
    complex_map  = get_log_gradient_sum(img) ;
    
    %%% generate Log-Gabor texture maps
    nScale  = 2 ; % Number of wavelet scales
    nOrient = 4 ; % Number of filter orientations
    [EO, ~] = gaborconvolve(img, nScale, nOrient, 3, 1.7, 0.65, 1.3) ; % function for convolving image with log-Gabor filters
    textureImg = cell(nScale*nOrient, 1) ;
    for s = 1:nScale
        for o = 1:nOrient
            k = (s-1) * nOrient + o ; % k = 1:8
            tImg = abs(EO{s, o}) ;
            textureImg{k}= tImg ./ max(max(tImg)) ; % normalized into 0~1
        end
    end
end